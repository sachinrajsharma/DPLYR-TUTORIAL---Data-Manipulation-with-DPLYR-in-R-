---
title: "DPLYR-TUTORIAL---Data-Manipulation-with-DPLYR-in-R-"
author: "Sachin Sharma"
date: "August 31, 2021"
output:
  word_document: default
  html_document: default
---


# Why to use dplyr ? 

* It is really useful for data exploration and transformation 
* Fast while dealing with data frames 

## Functionality of dplyr 

* It is useful while dealing with : 'select','filter', 'mutate' , ' arrange' , 'summarise', which can be use as five basic verbs 
* Can be very useful in handling inner joins, left join, semi-join, anti-join 


```{r}
# loading packages 
library(dplyr)
library(datasets)
install.packages("hflights")

library(hflights)
# Lets explore data 

data("hflights")
head(hflights)
```

* 'as_tibble' creates a "a local data frame"
* Tibble data frame will print first ten rows and total columns which fit to the screen in a systematic manner in comparison to raw data 

```{r}
# Convert to tibble 

flights <-  as_tibble(hflights)
flights
```

## Lets use filter to understand it ,
## If we want to view all flights on February 1 we can use the following two methods 

## METHOD - I 
```{r}
flights[flights$Month ==2 & flights$DayofMonth ==1, ]

```



## METHOD - II Using Filter 

```{r}

filter(flights, flights$Month ==2 , flights$DayofMonth ==1)


```

## If we want to use AND that means applying condition on two attributes

```{r}

filter(flights, UniqueCarrier =="AA" | UniqueCarrier == "UA" )

```

## We can use filter in the following manner as well by uinsg %in% 

```{r}
filter(flights, UniqueCarrier %in% c("AA","UA") )

```

## We can use select function to select columns by name 

```{r}

select(flights, DepTime, ArrTime, FlightNum)

```

## We can use colon to select multiple columns in continuation in a dataframe, also we can use 'matches' to match the exact word of column name 

```{r}

select(flights, Year:DayofMonth, contains("Taxi"), contains("Delay"))

```

## We can also use pipeline or chain for using multiple operation 
## Here we are filtering two columns and also using certain condition on a column 


```{r}
flights %>%  select(UniqueCarrier, DepDelay) %>% 
  filter(DepDelay > 50)

```


## Using arrange : to reorder rows 

```{r}

flights %>% 
  select(UniqueCarrier, DepDelay) %>% 
  arrange(DepDelay) # By default it will give ascending order of  the rows in DepDelay
```

## If we want to use descending order then simply we can use the following : 

```{r}

flights %>% 
  select(UniqueCarrier, DepDelay) %>% 
  arrange(desc(DepDelay))

```

## Adding a new column by using functions on the existing data 

```{r}

flights %>% 
  select(Distance, AirTime) %>% 
  mutate(Speed = Distance / AirTime*60) # here mutate will give us new column by the name of the speed 

```
## Using  summarise , group_by functions to reduce variables to values 

```{r}

# You are advised to use the following two codes to see how it will show data by using na.rm = TRUE and without using na.rm 
# It is further advisable to use na.rm while finding mean, median or other calculation on any data where missing values are there 



flights %>% 
  group_by(Dest) %>% 
  summarise(avg_delay = mean(ArrDelay))

```


```{r}
flights %>% 
  group_by(Dest) %>% 
  summarise(avg_delay = mean(ArrDelay, na.rm = TRUE))

```

```{r}

# Lets find the percentage of flights cancelled or diverted

flights %>% 
  group_by(UniqueCarrier) %>% 
  summarise_each(funs(mean), Cancelled , Diverted)

```

## for each carrier, lets calculate the minimum and maximum arrival and departure delay 

```{r}

flights %>% 
  group_by(UniqueCarrier) %>% 
  summarise_each(funs(min( . , na.rm = TRUE), max(. , na.rm = TRUE)), matches("Delay"))

```

## Helper functions 'n()' counts the number of rows in a group 
## Helper function 'n_distinct(vector)' counts the number of distinct items in that vector 

```{r}
# for each day of the year , count the total number of flights and sort in descending order 

library(dplyr)
flights %>% 
  group_by(Month, DayofMonth) %>% 
  summarise(flight_count = n()) %>% 
  arrange(desc(flight_count))

```


## We can also use "tally " function 

```{r}

flights %>% 
  group_by(Month, DayofMonth) %>% 
  tally(sort = TRUE)

```

# for each destination, count the total number of flights and the number of distinct planes that flew there 

```{r}
flights %>% 
  group_by(Dest) %>% 
  summarise(flight_count = n(), plane_count = n_distinct(TailNum))

```



# for each destination lets check the cancelled and not cancelled flights 

```{r}

flights %>% 
  group_by(Dest) %>% 
  select(Cancelled) %>% 
  table()


```


# Window functions 

```{r}

# for each carrier , calculate which two days of the year they had trheir longest departure delays 

flights %>% 
  group_by(UniqueCarrier) %>% 
  select(Month, DayofMonth, DepDelay) %>% 
  filter(min_rank(desc(DepDelay))<= 2) %>% 
  arrange(UniqueCarrier, desc(DepDelay))


```


# for each month, calculate the number of flights and the change from the preivous month 

```{r}
flights %>% 
  group_by(Month) %>% 
  summarise(flight_count = n()) %>% 
  mutate(change = flight_count - lag(flight_count))

```
